name: build

on:
  workflow_call:
    inputs:
      create-package:
        type: boolean
        default: false
      create-installers:
        type: boolean
        default: false
      production-build:
        type: boolean
        default: false
      build-type:
        required: true
        type: string
      qt-version:
        required: true
        type: string
      os:
        required: true
        type: string
    
env:
  linuxdeployqt-download-path: https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
  PRODUCTION_BUILD: ${{inputs.production-build}}
  QT_VERSION: ${{inputs.qt-version}}
  QT_COMPILER: ${{ inputs.os == 'linux' && 'gcc_64' || 'win64_msvc2019_64' }}
  QT_IFW_VERSION: 4.3
  QT_PATH: ${{github.workspace}}/qt
    
jobs:
  build_job:
    name: Build for ${{inputs.os}}
    runs-on: ${{ inputs.os == 'linux' && 'ubuntu' || 'windows' }}-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Install qt
      run: |
        pip install -U pip
        pip install aqtinstall
        aqt install-qt ${{inputs.os}} desktop ${{inputs.qt-version}} ${{env.QT_COMPILER}} --outputdir ${{env.QT_PATH}}
        
    - name: Install other dependencies (linux)
      if: ${{inputs.os == 'linux'}}
      run: |
        sudo apt-get update
        sudo apt-get install mesa-common-dev libglu1-mesa-dev
          
    - name: Configure CMake
      env:
        CMAKE_PREFIX_PATH: ${{github.workspace}}/qt/${{inputs.qt-version}}/${{ inputs.os == 'linux' && 'gcc_64' || 'msvc2019_64' }}/lib/cmake/
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{inputs.build-type}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{inputs.build-type}}
       
    - name: Install deploy dependencies (linux)
      if: ${{(inputs.create-package || inputs.create-installers) && inputs.os == 'linux'}}
      run: |
        wget ${{env.linuxdeployqt-download-path}} -P ${{github.workspace}}/qt/Tools/
        url=${{env.linuxdeployqt-download-path}}
        chmod +x ${{github.workspace}}/qt/Tools/${url##*/}
        sudo apt-get install libxcb-glx0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xtest0-dev libxcb-xinerama0-dev libxcb-shape0-dev libxcb-shm0-dev libxcb-sync-dev libxcb-xkb-dev libxcb-util-dev libxcb-xfixes0 libxkbcommon-x11-0 libegl1-mesa libegl1
          
    - name: Start a package script (linux)
      if: ${{inputs.create-package && inputs.os == 'linux'}}
      run: |
        sudo chmod +x ./scripts/desktop/${{inputs.os}}/create-package.sh
        ./scripts/desktop/${{inputs.os}}/create-package.sh -i ${{github.workspace}}/build ${{github.workspace}}/packages
        
    - name: Upload package
      if: ${{inputs.create-package}}
      uses: actions/upload-artifact@v3
      with:
        name: Resto.AppImage
        path: ${{github.workspace}}/packages/Resto.AppImage
        retention-days: 3

    - name: Install deploy installer dependencies (common)
      if: ${{inputs.create-installers}}
      run: |
        QT_IFW_TOOL="${QT_IFW_VERSION//./}"
        aqt install-tool ${{inputs.os}} desktop tools_ifw qt.tools.ifw.${QT_IFW_TOOL} --outputdir ${{env.QT_PATH}}
        
    - name: Start an installers script (linux)
      if: ${{inputs.create-installers && inputs.os == 'linux'}}
      run: |
        sudo chmod +x ./scripts/desktop/${{inputs.os}}/create-installer.sh
        sudo chmod +x ./scripts/desktop/${{inputs.os}}/create-package.sh
        ./scripts/desktop/${{inputs.os}}/create-installer.sh -o ${{github.workspace}}/build ${{github.workspace}}/installers/Resto_offline-installer
        ./scripts/desktop/${{inputs.os}}/create-installer.sh -r ${{github.workspace}}/installers/Resto_repository ${{github.workspace}}/build ${{github.workspace}}/installers/Resto_installer
        
